#!/usr/bin/env python3

import os
import sys
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

class BackgroundOpenNew(FileSystemEventHandler):
    """Opens newly created images"""
    def __init__(self, delay):
        self.delay = delay
        self.last = None
        super().__init__()


    def on_created(self, event):
        if self.last != event.src_path:
            self.last = event.src_path
            print(event.src_path)
            os.system(f'sleep {self.delay}; open -g {event.src_path}')

class Watcher(object):
    """Opens newly created files."""
    def __init__(self, path, delay):
        super().__init__()
        self.path = path
        self.observer = Observer()
        self.observer.schedule(BackgroundOpenNew(delay), self.path, recursive=True)
        self.start()

    def start(self):
        self.observer.start()

    def stop(self):
        self.observer.stop()

if __name__ == '__main__':
    path = sys.argv[1]
    delay = sys.argv[2] if len(sys.argv) > 2 else 0.1
    print(sys.argv[0], 'watching', path)
    w = Watcher(path, delay)
    try:
        while True:
            time.sleep(2)
    except KeyboardInterrupt:
        w.stop()
    w.observer.join()
